Index: bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/PostgreSQLContainerInitializer.java
===================================================================
--- bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/PostgreSQLContainerInitializer.java	(date 1580965776000)
+++ bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/PostgreSQLContainerInitializer.java	(date 1580965776000)
@@ -1,33 +0,0 @@
-package com.sivalabs.bookmarker.common;
-
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.boot.test.util.TestPropertyValues;
-import org.springframework.context.ApplicationContextInitializer;
-import org.springframework.context.ConfigurableApplicationContext;
-import org.testcontainers.containers.PostgreSQLContainer;
-
-import static com.sivalabs.bookmarker.utils.TestConstants.*;
-
-@Slf4j
-public class PostgreSQLContainerInitializer
-        implements ApplicationContextInitializer<ConfigurableApplicationContext> {
-
-    private static PostgreSQLContainer sqlContainer;
-
-    static {
-        sqlContainer = new PostgreSQLContainer(POSTGRES_DOCKER_IMAGE)
-                .withDatabaseName(POSTGRES_DOCKER_DATABASE_NAME)
-                .withUsername(POSTGRES_DOCKER_USERNAME)
-                .withPassword(POSTGRES_DOCKER_PASSWORD);
-        sqlContainer.start();
-    }
-
-    public void initialize (ConfigurableApplicationContext configurableApplicationContext){
-        TestPropertyValues.of(
-                "spring.datasource.url=" + sqlContainer.getJdbcUrl(),
-                "spring.datasource.username=" + sqlContainer.getUsername(),
-                "spring.datasource.password=" + sqlContainer.getPassword()
-        ).applyTo(configurableApplicationContext.getEnvironment());
-    }
-
-}
Index: bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/TestContainersConfig.java
===================================================================
--- bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/TestContainersConfig.java	(date 1580965776000)
+++ bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/TestContainersConfig.java	(date 1580965776000)
@@ -1,50 +0,0 @@
-package com.sivalabs.bookmarker.common;
-
-import lombok.extern.slf4j.Slf4j;
-import org.mockserver.client.MockServerClient;
-import org.springframework.boot.test.util.TestPropertyValues;
-import org.springframework.context.ApplicationContextInitializer;
-import org.springframework.context.ConfigurableApplicationContext;
-import org.springframework.test.context.ContextConfiguration;
-import org.testcontainers.containers.MockServerContainer;
-import org.testcontainers.containers.PostgreSQLContainer;
-
-import static com.sivalabs.bookmarker.utils.TestConstants.*;
-import static com.sivalabs.bookmarker.utils.TestConstants.POSTGRES_DOCKER_PASSWORD;
-
-@Slf4j
-@ContextConfiguration(initializers = {TestContainersConfig.Initializer.class})
-public class TestContainersConfig {
-
-    private static PostgreSQLContainer sqlContainer;
-
-    private static MockServerContainer mockServerContainer;
-
-    static {
-        sqlContainer = new PostgreSQLContainer(POSTGRES_DOCKER_IMAGE)
-                .withDatabaseName(POSTGRES_DOCKER_DATABASE_NAME)
-                .withUsername(POSTGRES_DOCKER_USERNAME)
-                .withPassword(POSTGRES_DOCKER_PASSWORD);
-        sqlContainer.start();
-
-        mockServerContainer = new MockServerContainer();
-        mockServerContainer.start();
-    }
-
-    protected MockServerClient mockServerClient = new MockServerClient(
-            mockServerContainer.getContainerIpAddress(),
-            mockServerContainer.getServerPort());
-
-
-    public static class Initializer
-            implements ApplicationContextInitializer<ConfigurableApplicationContext> {
-        public void initialize(ConfigurableApplicationContext configurableApplicationContext) {
-            log.info("mockserver.base-url=" + mockServerContainer.getEndpoint());
-            TestPropertyValues.of(
-                    "spring.datasource.url=" + sqlContainer.getJdbcUrl(),
-                    "spring.datasource.username=" + sqlContainer.getUsername(),
-                    "spring.datasource.password=" + sqlContainer.getPassword()
-            ).applyTo(configurableApplicationContext.getEnvironment());
-        }
-    }
-}
Index: bookmarker-java/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/pom.xml	(date 1580965776000)
+++ bookmarker-java/pom.xml	(date 1580970198983)
@@ -22,8 +22,8 @@
 	<properties>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
+
 		<java.version>1.8</java.version>
-
 		<spring-cloud.version>Hoxton.SR1</spring-cloud.version>
 		<problem-spring-web.version>0.25.0</problem-spring-web.version>
 		<logstash-logback.version>4.9</logstash-logback.version>
@@ -33,6 +33,7 @@
 		<rest-assured.version>3.1.1</rest-assured.version>
 
 		<testcontainers.version>1.12.2</testcontainers.version>
+		<playtika.testcontainers.version>1.39</playtika.testcontainers.version>
 		<heroku.appName>sivalabs-bookmarker-java</heroku.appName>
 		<jacoco.destFile>${project.build.directory}/coverage-reports/aggregate.exec</jacoco.destFile>
 		<jacoc.min.coverage>0.10</jacoc.min.coverage>
@@ -186,27 +187,14 @@
 			<scope>test</scope>
 		</dependency>
 		<dependency>
-			<groupId>org.testcontainers</groupId>
-			<artifactId>junit-jupiter</artifactId>
-			<version>${testcontainers.version}</version>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
-			<groupId>org.testcontainers</groupId>
-			<artifactId>postgresql</artifactId>
-			<version>${testcontainers.version}</version>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter</artifactId>
 			<scope>test</scope>
 		</dependency>
 		<dependency>
-			<groupId>org.testcontainers</groupId>
-			<artifactId>mockserver</artifactId>
-			<version>${testcontainers.version}</version>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
-			<groupId>org.mock-server</groupId>
-			<artifactId>mockserver-netty</artifactId>
-			<version>5.5.4</version>
+			<groupId>com.playtika.testcontainers</groupId>
+			<artifactId>embedded-postgresql</artifactId>
+			<version>${playtika.testcontainers.version}</version>
 			<scope>test</scope>
 		</dependency>
 	</dependencies>
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/entity/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/entity/User.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/entity/User.java	(date 1580971347415)
@@ -40,7 +40,7 @@
 	private String password;
 
 	@JsonIgnore
-	@ManyToMany(cascade=CascadeType.MERGE)
+	@ManyToMany(fetch = FetchType.EAGER, cascade=CascadeType.MERGE)
 	@JoinTable(
 	      name="user_role",
 	      joinColumns={@JoinColumn(name="USER_ID", referencedColumnName="ID")},
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/service/BookmarkService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/service/BookmarkService.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/service/BookmarkService.java	(date 1580983168660)
@@ -9,6 +9,7 @@
 import com.sivalabs.bookmarker.domain.repository.BookmarkRepository;
 import com.sivalabs.bookmarker.domain.repository.TagRepository;
 import com.sivalabs.bookmarker.domain.repository.UserRepository;
+import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
@@ -17,6 +18,7 @@
 import org.springframework.data.domain.Sort;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
+import org.springframework.util.StringUtils;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -27,17 +29,12 @@
 @Service
 @Transactional
 @Slf4j
+@RequiredArgsConstructor
 public class BookmarkService {
     private final BookmarkRepository bookmarkRepository;
     private final TagRepository tagRepository;
     private final UserRepository userRepository;
 
-    public BookmarkService(BookmarkRepository bookmarkRepository, TagRepository tagRepository, UserRepository userRepository) {
-        this.bookmarkRepository = bookmarkRepository;
-        this.tagRepository = tagRepository;
-        this.userRepository = userRepository;
-    }
-
     @Transactional(readOnly = true)
     @Cacheable("bookmarks")
     public BookmarksListDTO getAllBookmarks()  {
@@ -98,12 +95,7 @@
     private Bookmark saveBookmark(BookmarkDTO bookmarkDTO) throws IOException {
         Bookmark bookmark = new Bookmark();
         bookmark.setUrl(bookmarkDTO.getUrl());
-        bookmark.setTitle(bookmarkDTO.getTitle());
-
-        if (bookmark.getTitle().isEmpty()) {
-            Document doc = Jsoup.connect(bookmark.getUrl()).get();
-            bookmark.setTitle(doc.title());
-        }
+        bookmark.setTitle(getTitle(bookmarkDTO));
         bookmark.setCreatedBy(userRepository.getOne(bookmarkDTO.getCreatedUserId()));
         List<Tag> tagsList = new ArrayList<>();
         bookmarkDTO.getTags().forEach(tagName -> {
@@ -116,6 +108,18 @@
         return bookmarkRepository.save(bookmark);
     }
 
+    private String getTitle(BookmarkDTO bookmark) {
+        try {
+            if (StringUtils.isEmpty(bookmark.getTitle())) {
+                Document doc = Jsoup.connect(bookmark.getUrl()).get();
+                return doc.title();
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return bookmark.getUrl();
+    }
+
     private Tag createTagIfNotExist(String tagName) {
         Optional<Tag> tagOptional = tagRepository.findByName(tagName);
         if (tagOptional.isPresent()) {
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/service/UserService.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/service/UserService.java	(date 1580969740438)
@@ -8,6 +8,7 @@
 import com.sivalabs.bookmarker.domain.model.UserDTO;
 import com.sivalabs.bookmarker.domain.repository.RoleRepository;
 import com.sivalabs.bookmarker.domain.repository.UserRepository;
+import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
@@ -19,17 +20,12 @@
 @Service
 @Transactional
 @Slf4j
+@RequiredArgsConstructor
 public class UserService {
     private final UserRepository userRepository;
     private final RoleRepository roleRepository;
     private final PasswordEncoder passwordEncoder;
 
-    public UserService(UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
-        this.userRepository = userRepository;
-        this.roleRepository = roleRepository;
-        this.passwordEncoder = passwordEncoder;
-    }
-
     @Transactional(readOnly = true)
     public Optional<UserDTO> getUserById(Long id) {
         return userRepository.findById(id).map(UserDTO::fromEntity);
Index: bookmarker-ui-react/src/store/actions/actionCreators.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/store/actions/actionCreators.js	(date 1580965776000)
+++ bookmarker-ui-react/src/store/actions/actionCreators.js	(date 1580981312091)
@@ -35,6 +35,32 @@
     };
 }
 
+export function fetchBookmarksByTag(tag) {
+    return dispatch => {
+        return axios("/api/bookmarks/tagged/"+tag)
+            .then(response => {
+                return dispatch({
+                    type: actionTypes.RECEIVE_SELECTED_TAG,
+                    payload: response.data
+                });
+            })
+            .catch(e => console.log("error", e));
+    };
+}
+
+export function fetchAllTags() {
+    return dispatch => {
+        return axios("/api/tags")
+            .then(response => {
+                return dispatch({
+                    type: actionTypes.RECEIVE_ALL_TAGS,
+                    payload: response.data
+                });
+            })
+            .catch(e => console.log("error", e));
+    };
+}
+
 export function searchBookmarks(query) {
     return dispatch => {
         return axios("/api/bookmarks/search?query=" + query)
Index: bookmarker-ui-react/src/store/actions/actionTypes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/store/actions/actionTypes.js	(date 1580965776000)
+++ bookmarker-ui-react/src/store/actions/actionTypes.js	(date 1580981312098)
@@ -2,5 +2,7 @@
 export const LOGIN_FAILURE = "LOGIN_FAILURE";
 export const LOGOUT = "LOGOUT";
 export const RECEIVE_BOOKMARKS = "RECEIVE_BOOKMARKS";
+export const RECEIVE_SELECTED_TAG = "RECEIVE_SELECTED_TAG";
+export const RECEIVE_ALL_TAGS = "RECEIVE_ALL_TAGS";
 export const RECEIVE_SEARCH_BOOKMARKS = "RECEIVE_SEARCH_BOOKMARKS";
 export const CREATE_BOOKMARK_SUCCESS = "CREATE_BOOKMARK_SUCCESS";
Index: bookmarker-java/src/main/resources/db/migration/h2/V1__create_tables.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/resources/db/migration/h2/V1__create_tables.sql	(date 1580965776000)
+++ bookmarker-java/src/main/resources/db/migration/h2/V1__create_tables.sql	(date 1580969460942)
@@ -4,23 +4,23 @@
 create sequence tag_id_seq start with 1 increment by 1;
 
 create table users (
-    id bigint default user_id_seq.nextval,
+    id bigint DEFAULT nextval('user_id_seq') not null,
     email varchar(255) not null,
     password varchar(255) not null,
     name varchar(255) not null,
     created_at timestamp,
     updated_at timestamp,
     primary key (id),
-    UNIQUE KEY user_email_unique (email)
+    CONSTRAINT user_email_unique UNIQUE(email)
 );
 
 create table roles (
-    id bigint default role_id_seq.nextval,
+    id bigint DEFAULT nextval('role_id_seq') not null,
     name varchar(255) not null,
     created_at timestamp,
     updated_at timestamp,
     primary key (id),
-    UNIQUE KEY role_name_unique (name)
+    CONSTRAINT role_name_unique UNIQUE(name)
 );
 
 create table user_role (
@@ -29,23 +29,23 @@
 );
 
 create table bookmarks (
-    id bigint default bm_id_seq.nextval,
+    id bigint DEFAULT nextval('bm_id_seq') not null,
     url varchar(1024) not null,
     title varchar(1024),
     created_by bigint not null,
     created_at timestamp,
     updated_at timestamp,
     primary key (id),
-    foreign key (created_by) references users(id)
+    foreign key (created_by) REFERENCES users(id)
 );
 
 create table tags (
-    id bigint default tag_id_seq.nextval,
+    id bigint DEFAULT nextval('tag_id_seq') not null,
     name varchar(100) not null,
     created_at timestamp,
     updated_at timestamp,
     primary key (id),
-    UNIQUE KEY tag_name_unique (name)
+    CONSTRAINT tag_name_unique UNIQUE(name)
 );
 
 create table bookmark_tag (
Index: bookmarker-java/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/resources/application.properties	(date 1580965776000)
+++ bookmarker-java/src/main/resources/application.properties	(date 1580967292253)
@@ -21,7 +21,7 @@
 #spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
 management.endpoints.web.exposure.include=*
 
-spring.datasource.hikari.connection-test-query=SELECT 1
+#spring.datasource.hikari.connection-test-query=SELECT 1
 spring.h2.console.enabled=true
 spring.jpa.show-sql=false
 spring.flyway.locations=classpath:/db/migration/{vendor}
Index: bookmarker-ui-react/src/store/reducers/bookmarks.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/store/reducers/bookmarks.js	(date 1580965776000)
+++ bookmarker-ui-react/src/store/reducers/bookmarks.js	(date 1580981312100)
@@ -2,6 +2,8 @@
 
 const initialState = {
     allBookmarks: [],
+    selectedTag: {},
+    allTags: [],
     searchResults: []
 };
 const bookmarks = (state = initialState, action) => {
@@ -11,6 +13,16 @@
                 ...state,
                 allBookmarks: action.payload || []
             };
+        case actionTypes.RECEIVE_SELECTED_TAG:
+            return {
+                ...state,
+                selectedTag: action.payload || []
+            };
+        case actionTypes.RECEIVE_ALL_TAGS:
+            return {
+                ...state,
+                allTags: action.payload || []
+            };
         case actionTypes.RECEIVE_SEARCH_BOOKMARKS:
             return {
                 ...state,
Index: bookmarker-ui-react/src/components/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/App.js	(date 1580965776000)
+++ bookmarker-ui-react/src/components/App.js	(date 1580981949194)
@@ -1,6 +1,7 @@
 import React from "react";
 import { Route, Switch } from "react-router-dom";
 import Home from "./Home/Home";
+import BookmarksByTag from "./ByTag/BookmarksByTag";
 import NavBar from "./Layout/NavBar";
 import Login from "./Login/Login";
 
@@ -10,6 +11,7 @@
         <main role="main" className="container">
             <Switch>
                 <Route path="/login" component={Login} />
+                <Route path="/tags/:tag" component={BookmarksByTag} />
                 <Route component={Home} />
             </Switch>
         </main>
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/UserController.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/UserController.java	(date 1580969634121)
@@ -7,6 +7,7 @@
 import com.sivalabs.bookmarker.domain.service.UserService;
 import com.sivalabs.bookmarker.web.exception.BadRequestException;
 import com.sivalabs.bookmarker.web.utils.SecurityUtils;
+import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
@@ -18,16 +19,13 @@
 
 import static org.springframework.http.HttpStatus.CREATED;
 
+@Slf4j
 @RestController
 @RequestMapping("/api/users")
-@Slf4j
+@RequiredArgsConstructor
 public class UserController {
     private final UserService userService;
 
-    public UserController(UserService userService) {
-        this.userService = userService;
-    }
-
     @GetMapping("/{id}")
     public ResponseEntity<UserDTO> getUser(@PathVariable Long id) {
         log.info("process=get_user, user_id=$id");
Index: bookmarker-ui-react/src/components/Widgets/BookmarksList.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/Widgets/BookmarksList.js	(date 1580965776000)
+++ bookmarker-ui-react/src/components/Widgets/BookmarksList.js	(date 1580972273832)
@@ -4,7 +4,7 @@
 import BookmarkListItem from "./BookmarkListItem";
 
 const BookmarksList = ({ bookmarks }) => {
-  const [layout, setLayout] = useState("grid");
+  const [layout, setLayout] = useState("list");
 
   const renderListItem = bookmark => {
     return (
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/TagController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/TagController.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/TagController.java	(date 1580969582336)
@@ -2,6 +2,7 @@
 
 import com.sivalabs.bookmarker.domain.entity.Tag;
 import com.sivalabs.bookmarker.domain.repository.TagRepository;
+import lombok.RequiredArgsConstructor;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
@@ -10,13 +11,10 @@
 
 @RestController
 @RequestMapping("/api")
+@RequiredArgsConstructor
 public class TagController {
     private final TagRepository tagRepository;
 
-    public TagController(TagRepository tagRepository) {
-        this.tagRepository = tagRepository;
-    }
-
     @GetMapping("/tags")
     public List<Tag> allTags() {
         return tagRepository.findAll();
Index: bookmarker-ui-react/src/components/Widgets/BoomarkOptions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/Widgets/BoomarkOptions.js	(date 1580965776000)
+++ bookmarker-ui-react/src/components/Widgets/BoomarkOptions.js	(date 1580982525287)
@@ -1,14 +1,15 @@
 import React from "react";
 import { Button } from "primereact/button";
+import {NavLink} from "react-router-dom";
 
 const BookmarkOptions = ({ bookmark }) => {
   return (
     <div>
-      <Button icon="pi pi-share-alt" className="m-1" />
-      <Button icon="pi pi-heart" className="m-1" />
-      <Button icon="pi pi-tags" className="m-1" />
-      <Button icon="pi pi-inbox" className="m-1" />
-      <Button icon="pi pi-trash" className="m-1" />
+      {bookmark.tags.map(tag =>
+          <NavLink key={tag} to={"/tags/"+tag}>
+            <Button key={tag} label={tag} icon="pi pi-tags" className="m-1" />
+          </NavLink>
+          )}
     </div>
   );
 };
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/AuthenticationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/AuthenticationController.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/AuthenticationController.java	(date 1580969541467)
@@ -9,6 +9,7 @@
 import com.sivalabs.bookmarker.domain.model.AuthenticationResponse;
 import com.sivalabs.bookmarker.domain.model.UserDTO;
 import com.sivalabs.bookmarker.web.utils.SecurityUtils;
+import lombok.RequiredArgsConstructor;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
@@ -23,19 +24,13 @@
 
 @RestController
 @RequestMapping("/api")
+@RequiredArgsConstructor
 public class AuthenticationController {
     private final AuthenticationManager authenticationManager;
     private final CustomUserDetailsService userDetailsService;
     private final TokenHelper tokenHelper;
     private final BookmarkerProperties bookmarkerProperties;
 
-    public AuthenticationController(AuthenticationManager authenticationManager, CustomUserDetailsService userDetailsService, TokenHelper tokenHelper, BookmarkerProperties bookmarkerProperties) {
-        this.authenticationManager = authenticationManager;
-        this.userDetailsService = userDetailsService;
-        this.tokenHelper = tokenHelper;
-        this.bookmarkerProperties = bookmarkerProperties;
-    }
-
     @PostMapping(value = "/auth/login")
     public AuthenticationResponse createAuthenticationToken(@RequestBody AuthenticationRequest credentials) {
         Authentication authentication = authenticationManager.authenticate(
Index: bookmarker-java/src/main/resources/db/migration/postgresql/V1__create_tables.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/resources/db/migration/postgresql/V1__create_tables.sql	(date 1580965776000)
+++ bookmarker-java/src/main/resources/db/migration/postgresql/V1__create_tables.sql	(date 1580969460937)
@@ -5,20 +5,22 @@
 
 create table users (
     id bigint DEFAULT nextval('user_id_seq') not null,
-    email varchar(255) not null CONSTRAINT user_email_unique UNIQUE,
+    email varchar(255) not null,
     password varchar(255) not null,
     name varchar(255) not null,
     created_at timestamp,
     updated_at timestamp,
-    primary key (id)
+    primary key (id),
+    CONSTRAINT user_email_unique UNIQUE(email)
 );
 
 create table roles (
     id bigint DEFAULT nextval('role_id_seq') not null,
-    name varchar(255) not null CONSTRAINT role_name_unique UNIQUE,
+    name varchar(255) not null,
     created_at timestamp,
     updated_at timestamp,
-    primary key (id)
+    primary key (id),
+    CONSTRAINT role_name_unique UNIQUE(name)
 );
 
 create table user_role (
@@ -30,7 +32,7 @@
     id bigint DEFAULT nextval('bm_id_seq') not null,
     url varchar(1024) not null,
     title varchar(1024),
-    created_by bigint not null references users(id),
+    created_by bigint not null REFERENCES users(id),
     created_at timestamp,
     updated_at timestamp,
     primary key (id)
@@ -38,10 +40,11 @@
 
 create table tags (
     id bigint DEFAULT nextval('tag_id_seq') not null,
-    name varchar(255) not null CONSTRAINT tag_name_unique UNIQUE,
+    name varchar(255) not null,
     created_at timestamp,
     updated_at timestamp,
-    primary key (id)
+    primary key (id),
+    CONSTRAINT tag_name_unique UNIQUE(name)
 );
 
 create table bookmark_tag (
Index: bookmarker-java/src/test/resources/bootstrap.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/test/resources/bootstrap.properties	(date 1580966569924)
+++ bookmarker-java/src/test/resources/bootstrap.properties	(date 1580966569924)
@@ -0,0 +1,1 @@
+embedded.postgresql.enabled=false
Index: bookmarker-ui-react/src/components/Home/Home.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/Home/Home.js	(date 1580965776000)
+++ bookmarker-ui-react/src/components/Home/Home.js	(date 1580982259972)
@@ -1,23 +1,39 @@
-import React from "react";
-import AddBookmark from "./AddBookmark";
-import BookmarksContainer from "./BookmarksContainer";
+import React, { useEffect } from "react";
+import { useSelector, useDispatch } from "react-redux";
+import { fetchAllBookmarks } from "../../store/actions/actionCreators";
+import BookmarksList from "../Widgets/BookmarksList";
+import AddBookmark from "../common/AddBookmark";
+import TagNavContainer from "../common/TagNavContainer";
 
 const Home = () => {
+    const bookmarks = useSelector(state => state.bookmarks.allBookmarks);
+    const dispatch = useDispatch();
+
+    useEffect(() => {
+        console.log("loading bookmarks....");
+        dispatch(fetchAllBookmarks());
+    }, []);
+
     return (
-        <>
-            <div className="container">
-                <div className="row">
-                    <div className="col-12">
-                        <div>
-                            <AddBookmark />
-                        </div>
-                        <div className="mt-3">
-                            <BookmarksContainer />
+        <div className="container">
+            <div className="row">
+                <div className="col-12">
+                    <div>
+                        <AddBookmark />
+                    </div>
+                    <div className="mt-3">
+                        <div className="row">
+                            <div className="col-9">
+                                <BookmarksList bookmarks={bookmarks} />
+                            </div>
+                            <div className="col-3">
+                                <TagNavContainer />
+                            </div>
                         </div>
                     </div>
                 </div>
             </div>
-        </>
+        </div>
     );
 };
 
Index: bookmarker-ui-react/src/components/Home/AddBookmark.js
===================================================================
--- bookmarker-ui-react/src/components/Home/AddBookmark.js	(date 1580965776000)
+++ bookmarker-ui-react/src/components/common/AddBookmark.js	(date 1580982197614)
@@ -6,7 +6,6 @@
 const AddBookmark = () => {
   let growl = useRef(null);
   const [url, setUrl] = useState("");
-  const [description, setDescription] = useState("");
 
   const dispatch = useDispatch();
 
Index: bookmarker-java/src/test/resources/bootstrap-integration-test.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/test/resources/bootstrap-integration-test.properties	(date 1580966941638)
+++ bookmarker-java/src/test/resources/bootstrap-integration-test.properties	(date 1580966941638)
@@ -0,0 +1,5 @@
+#embedded.postgresql.enabled=true
+#spring.datasource.driver-class-name=org.postgresql.Driver
+#spring.datasource.url=jdbc:postgresql://${embedded.postgresql.host}:${embedded.postgresql.port}/${embedded.postgresql.schema}
+#spring.datasource.username=${embedded.postgresql.user}
+#spring.datasource.password=${embedded.postgresql.password}
Index: bookmarker-ui-react/src/components/Layout/NavBar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/Layout/NavBar.js	(date 1580965776000)
+++ bookmarker-ui-react/src/components/Layout/NavBar.js	(date 1580972165995)
@@ -15,30 +15,29 @@
 
     if (user.access_token) {
         authenticatedLinks = (
-            <div className="collapse navbar-collapse" id="navbarCollapse">
-                <ul className="navbar-nav mr-auto">
-                    <li className="nav-item">
-                        <NavLink className="nav-link" to="/">
-                            Home <span className="sr-only">(current)</span>
-                        </NavLink>
-                    </li>
-                </ul>
-                <ul className="navbar-nav">
-                    <li className="nav-item">
-                        <button className="btn btn-outline-success my-2 my-sm-0" onClick={logoutHandler}>
-                            Logout
-                        </button>
-                    </li>
-                </ul>
-            </div>
+            <ul className="navbar-nav">
+                <li className="nav-item">
+                    <button className="btn btn-outline-success my-2 my-sm-0" onClick={logoutHandler}>
+                        Logout
+                    </button>
+                </li>
+            </ul>
         );
     } else {
-        authenticatedLinks = "";
+        authenticatedLinks = (
+            <ul className="navbar-nav">
+                <li className="nav-item">
+                    <NavLink className="nav-link" to="/login">
+                        Login
+                    </NavLink>
+                </li>
+            </ul>
+        );
     }
     return (
         <nav className="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
             <NavLink className="navbar-brand" to="/">
-                ExpenseTracker
+                Bookmarker
             </NavLink>
             <button
                 className="navbar-toggler"
@@ -51,7 +50,18 @@
             >
                 <span className="navbar-toggler-icon"></span>
             </button>
-            {authenticatedLinks}
+            <div className="collapse navbar-collapse" id="navbarCollapse">
+                <ul className="navbar-nav mr-auto">
+                    {/*
+                    <li className="nav-item">
+                        <NavLink className="nav-link" to="/">
+                            Home <span className="sr-only">(current)</span>
+                        </NavLink>
+                    </li>*/}
+                </ul>
+                {authenticatedLinks}
+            </div>
+
         </nav>
     );
 };
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/BookmarkController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/BookmarkController.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/web/controller/BookmarkController.java	(date 1580969564394)
@@ -1,12 +1,12 @@
 package com.sivalabs.bookmarker.web.controller;
 
-
 import com.sivalabs.bookmarker.domain.exception.BookmarkNotFoundException;
 import com.sivalabs.bookmarker.domain.model.BookmarkByTagDTO;
 import com.sivalabs.bookmarker.domain.model.BookmarkDTO;
 import com.sivalabs.bookmarker.domain.model.BookmarksListDTO;
 import com.sivalabs.bookmarker.domain.service.BookmarkService;
 import com.sivalabs.bookmarker.web.utils.SecurityUtils;
+import lombok.RequiredArgsConstructor;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.access.prepost.PreAuthorize;
@@ -16,13 +16,10 @@
 
 @RestController
 @RequestMapping("/api/bookmarks")
+@RequiredArgsConstructor
 public class BookmarkController {
     private final BookmarkService bookmarkService;
 
-    public BookmarkController(BookmarkService bookmarkService) {
-        this.bookmarkService = bookmarkService;
-    }
-
     @GetMapping
     public BookmarksListDTO getAllBookmarks(@RequestParam(name = "userId", required = false) Long userId) {
         if (userId == null) {
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/TokenAuthenticationFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/TokenAuthenticationFilter.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/TokenAuthenticationFilter.java	(date 1580969841800)
@@ -1,5 +1,6 @@
 package com.sivalabs.bookmarker.config.security;
 
+import lombok.RequiredArgsConstructor;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;
@@ -11,15 +12,11 @@
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
+@RequiredArgsConstructor
 public class TokenAuthenticationFilter extends OncePerRequestFilter {
 
-    private TokenHelper tokenHelper;
-    private UserDetailsService userDetailsService;
-
-    public TokenAuthenticationFilter(TokenHelper tokenHelper, UserDetailsService userDetailsService) {
-        this.tokenHelper = tokenHelper;
-        this.userDetailsService = userDetailsService;
-    }
+    private final TokenHelper tokenHelper;
+    private final UserDetailsService userDetailsService;
 
     @Override
     public void doFilterInternal(
@@ -44,4 +41,4 @@
         chain.doFilter(request, response);
     }
 
-}
\ No newline at end of file
+}
Index: bookmarker-java/src/test/java/com/sivalabs/bookmarker/domain/repository/BookmarkRepositoryIT.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/test/java/com/sivalabs/bookmarker/domain/repository/BookmarkRepositoryIT.java	(date 1580965776000)
+++ bookmarker-java/src/test/java/com/sivalabs/bookmarker/domain/repository/BookmarkRepositoryIT.java	(date 1580966854152)
@@ -1,21 +1,23 @@
 package com.sivalabs.bookmarker.domain.repository;
 
-import com.sivalabs.bookmarker.common.PostgreSQLContainerInitializer;
 import com.sivalabs.bookmarker.domain.entity.Bookmark;
 import lombok.extern.slf4j.Slf4j;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
 import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
-import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.ActiveProfiles;
+
 import javax.persistence.EntityManager;
 import java.util.List;
+
+import static com.sivalabs.bookmarker.utils.Constants.PROFILE_IT;
 import static org.assertj.core.api.Assertions.assertThat;
 
 @Slf4j
 @DataJpaTest
 @AutoConfigureTestDatabase(replace= AutoConfigureTestDatabase.Replace.NONE)
-@ContextConfiguration(initializers = {PostgreSQLContainerInitializer.class})
+@ActiveProfiles(PROFILE_IT)
 class BookmarkRepositoryIT {
 
     @Autowired
@@ -29,4 +31,4 @@
         List<Bookmark> allBookmarks = bookmarkRepository.findAll();
         assertThat(allBookmarks).isNotNull();
     }
-}
\ No newline at end of file
+}
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/WebSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/WebSecurityConfig.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/WebSecurityConfig.java	(date 1580970042447)
@@ -52,7 +52,6 @@
                 .passwordEncoder( passwordEncoder() );
     }
 
-
     @Override
     protected void configure(HttpSecurity http) throws Exception {
         http
@@ -94,4 +93,4 @@
         );
 
     }
-}
\ No newline at end of file
+}
Index: bookmarker-ui-react/src/components/ByTag/BookmarksByTag.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/ByTag/BookmarksByTag.js	(date 1580981895479)
+++ bookmarker-ui-react/src/components/ByTag/BookmarksByTag.js	(date 1580981895479)
@@ -0,0 +1,35 @@
+import React from "react";
+import { useParams } from "react-router-dom";
+import AddBookmark from "../common/AddBookmark";
+import BookmarksByTagContainer from "./BookmarksByTagContainer";
+import TagNavContainer from "../common/TagNavContainer";
+
+const BookmarksByTag = () => {
+    let { tag } = useParams();
+    console.log('selected tag:', tag);
+    return (
+        <>
+            <div className="container">
+                <div className="row">
+                    <div className="col-12">
+                        <div>
+                            <AddBookmark />
+                        </div>
+                        <div className="mt-3">
+                            <div className="row">
+                                <div className="col-9">
+                                    <BookmarksByTagContainer tag={tag}/>
+                                </div>
+                                <div className="col-3">
+                                    <TagNavContainer />
+                                </div>
+                            </div>
+                        </div>
+                    </div>
+                </div>
+            </div>
+        </>
+    );
+};
+
+export default BookmarksByTag;
Index: bookmarker-ui-react/src/components/Widgets/TagNav.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/Widgets/TagNav.js	(date 1580983726020)
+++ bookmarker-ui-react/src/components/Widgets/TagNav.js	(date 1580983726020)
@@ -0,0 +1,20 @@
+import React from "react";
+import { Button } from "primereact/button";
+import {NavLink} from "react-router-dom";
+
+const TagNav = (props) => {
+    const tags = props.tags || [];
+    return (
+        <div>
+            {
+                tags.map(tag =>
+                    <NavLink key={tag.id} to={"/tags/"+tag.name}>
+                        <Button label={tag.name} icon="pi pi-tags" className="m-1" />
+                    </NavLink>
+                )
+            }
+        </div>
+    );
+};
+
+export default TagNav;
Index: bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/AbstractIntegrationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/AbstractIntegrationTest.java	(date 1580965776000)
+++ bookmarker-java/src/test/java/com/sivalabs/bookmarker/common/AbstractIntegrationTest.java	(date 1580966854162)
@@ -13,7 +13,7 @@
 @ActiveProfiles(PROFILE_IT)
 @SpringBootTest(webEnvironment = RANDOM_PORT)
 @AutoConfigureMockMvc
-public abstract class AbstractIntegrationTest extends TestContainersConfig {
+public abstract class AbstractIntegrationTest {
 
     @Autowired
     protected MockMvc mockMvc;
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/TokenHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/TokenHelper.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/TokenHelper.java	(date 1580970042439)
@@ -6,6 +6,7 @@
 import io.jsonwebtoken.Claims;
 import io.jsonwebtoken.Jwts;
 import io.jsonwebtoken.SignatureAlgorithm;
+import lombok.RequiredArgsConstructor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.security.core.userdetails.UserDetails;
@@ -15,16 +16,13 @@
 import java.util.Date;
 
 @Component
+@RequiredArgsConstructor
 public class TokenHelper {
 
-    @Autowired
-    private BookmarkerProperties bookmarkerProperties;
-
-    @Autowired
-    TimeProvider timeProvider;
+    private final BookmarkerProperties bookmarkerProperties;
+    private final TimeProvider timeProvider;
 
-    static final String AUDIENCE_WEB = "web";
-
+    private static final String AUDIENCE_WEB = "web";
     private SignatureAlgorithm SIGNATURE_ALGORITHM = SignatureAlgorithm.HS512;
 
     public String getUsernameFromToken(String token) {
@@ -38,7 +36,7 @@
         return username;
     }
 
-    public Date getIssuedAtDateFromToken(String token) {
+    private Date getIssuedAtDateFromToken(String token) {
         Date issueAt;
         try {
             final Claims claims = this.getAllClaimsFromToken(token);
@@ -49,17 +47,6 @@
         return issueAt;
     }
 
-    public String getAudienceFromToken(String token) {
-        String audience;
-        try {
-            final Claims claims = this.getAllClaimsFromToken(token);
-            audience = claims.getAudience();
-        } catch (Exception e) {
-            audience = null;
-        }
-        return audience;
-    }
-
     public String refreshToken(String token) {
         String refreshedToken;
         Date a = timeProvider.now();
@@ -78,11 +65,10 @@
     }
 
     public String generateToken(String username) {
-        String audience = AUDIENCE_WEB;
         return Jwts.builder()
                 .setIssuer( bookmarkerProperties.getJwt().getIssuer() )
                 .setSubject(username)
-                .setAudience(audience)
+                .setAudience(AUDIENCE_WEB)
                 .setIssuedAt(timeProvider.now())
                 .setExpiration(generateExpirationDate())
                 .signWith( SIGNATURE_ALGORITHM, bookmarkerProperties.getJwt().getSecret() )
@@ -106,18 +92,11 @@
         return new Date(timeProvider.now().getTime() + bookmarkerProperties.getJwt().getExpiresIn() * 1000);
     }
 
-    public long getExpiredIn() {
-        return bookmarkerProperties.getJwt().getExpiresIn();
-    }
-
     public Boolean validateToken(String token, UserDetails userDetails) {
-        User user = (User) userDetails;
         final String username = getUsernameFromToken(token);
-        final Date created = getIssuedAtDateFromToken(token);
-        return (
-                username != null &&
-                        username.equals(userDetails.getUsername())
-        );
+        // User user = (User) userDetails;
+        // final Date created = getIssuedAtDateFromToken(token);
+        return (username != null && username.equals(userDetails.getUsername()));
     }
 
     public String getToken( HttpServletRequest request ) {
@@ -133,8 +112,8 @@
         return null;
     }
 
-    public String getAuthHeaderFromHeader( HttpServletRequest request ) {
+    private String getAuthHeaderFromHeader(HttpServletRequest request) {
         return request.getHeader(bookmarkerProperties.getJwt().getHeader());
     }
 
-}
\ No newline at end of file
+}
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/CustomUserDetailsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/CustomUserDetailsService.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/config/security/CustomUserDetailsService.java	(date 1580969777119)
@@ -1,6 +1,7 @@
 package com.sivalabs.bookmarker.config.security;
 
 import com.sivalabs.bookmarker.domain.repository.UserRepository;
+import lombok.RequiredArgsConstructor;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
@@ -9,14 +10,11 @@
 import java.util.Optional;
 
 @Service("userDetailsService")
+@RequiredArgsConstructor
 public class CustomUserDetailsService implements UserDetailsService {
 
     private final UserRepository userRepository;
 
-    public CustomUserDetailsService(UserRepository userRepository) {
-        this.userRepository = userRepository;
-    }
-
     @Override
     public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
         Optional<com.sivalabs.bookmarker.domain.entity.User> user = userRepository.findByEmail(username);
Index: bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/model/BookmarkDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/model/BookmarkDTO.java	(date 1580965776000)
+++ bookmarker-java/src/main/java/com/sivalabs/bookmarker/domain/model/BookmarkDTO.java	(date 1580983635946)
@@ -7,6 +7,7 @@
 
 import javax.validation.constraints.NotBlank;
 import java.time.LocalDateTime;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -33,6 +34,13 @@
 
     private List<String> tags;
 
+    public List<String> getTags() {
+        if(this.tags == null) {
+            this.tags = new ArrayList<>();
+        }
+        return this.tags;
+    }
+
     public static BookmarkDTO fromEntity(Bookmark bookmark) {
         BookmarkDTO dto = new BookmarkDTO();
         dto.setId(bookmark.getId());
@@ -42,7 +50,9 @@
         dto.setCreatedUserName(bookmark.getCreatedBy().getName());
         dto.setCreatedAt(bookmark.getCreatedAt());
         dto.setUpdatedAt(bookmark.getUpdatedAt());
-        dto.setTags(bookmark.getTags().stream().map(Tag::getName).collect(Collectors.toList()));
+        if(bookmark.getTags() != null) {
+            dto.setTags(bookmark.getTags().stream().map(Tag::getName).collect(Collectors.toList()));
+        }
         return dto;
     }
 }
Index: bookmarker-ui-react/src/components/common/TagNavContainer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/common/TagNavContainer.js	(date 1580975954299)
+++ bookmarker-ui-react/src/components/common/TagNavContainer.js	(date 1580975954299)
@@ -0,0 +1,18 @@
+import React, { useEffect } from "react";
+import { useSelector, useDispatch } from "react-redux";
+import { fetchAllTags } from "../../store/actions/actionCreators";
+import TagNav from "../Widgets/TagNav";
+
+const TagNavContainer = () => {
+    const tags = useSelector(state => state.bookmarks.allTags);
+    const dispatch = useDispatch();
+
+    useEffect(() => {
+        console.log("loading tags....");
+        dispatch(fetchAllTags());
+    }, []);
+
+    return <TagNav tags={tags} />;
+};
+
+export default TagNavContainer;
Index: bookmarker-ui-react/src/components/ByTag/BookmarksByTagContainer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- bookmarker-ui-react/src/components/ByTag/BookmarksByTagContainer.js	(date 1580981851074)
+++ bookmarker-ui-react/src/components/ByTag/BookmarksByTagContainer.js	(date 1580981851074)
@@ -0,0 +1,17 @@
+import React, { useEffect } from "react";
+import { useSelector, useDispatch } from "react-redux";
+import { fetchBookmarksByTag } from "../../store/actions/actionCreators";
+import BookmarksList from "../Widgets/BookmarksList";
+
+const BookmarksByTagContainer = (props) => {
+    const selectedTag = useSelector(state => state.bookmarks.selectedTag) || {};
+    const dispatch = useDispatch();
+
+    useEffect(() => {
+        console.log("loading bookmarks by tag:", props.tag);
+        dispatch(fetchBookmarksByTag(props.tag));
+    }, [props]);
+    return <BookmarksList bookmarks={selectedTag.bookmarks} />;
+};
+
+export default BookmarksByTagContainer;
